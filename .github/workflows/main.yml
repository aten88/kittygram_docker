# .github/workflows/main.yml
name: Main Kittygram workflow

on:
  push:
    branches:
      - main

jobs:
  tests:
    # Разворачиваем окружение:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        # Указываем имя тестовой базы, имя и пароль пользователя в открытом виде,
        # ведь эта база будет работать только во время прогона тестов
        env:
          POSTGRES_USER: kittygram_user
          POSTGRES_PASSWORD: kittygram_password
          POSTGRES_DB: kittygram
        ports:
          - 5432:5432
        # Эта конструкция описывает проверку готовности сервиса postgres
        # Если её не будет, то тесты могут запуститься раньше, чем сервер PostgreSQL
        # В результате тесты опять решат, что базы нет, — и упадут
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    # Копируем код проекта
    - name: Check out code
      uses: actions/checkout@v3
    # Устанавливаем Python с помощью action
    - name: Set up Python
      uses: actions/setup-python@v4
    # В action setup-python@v4 передаём параметр — версию Python
      with:
        python-version: 3.9
    # Обновляем pip, устанавливаем flake8 и flake8-isort, 
    # Чтобы запустить тесты, нужно установить зависимости
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install flake8==6.0.0 flake8-isort==6.0.0
        pip install -r ./backend/requirements.txt
    # Запускаем flake8
    - name: Test with flake8 and django tests
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        POSTGRES_USER: kittygram_user
        POSTGRES_PASSWORD: kittygram_password
        POSTGRES_DB: kittygram
        DB_HOST: 127.0.0.1
        DB_PORT: 5432
      # Вызываем flake8 и указываем ему,
      # что нужно проверить файлы только в папке backend/
      # Команд стало больше одной; ставим символ | и пишем команды построчно
      run: |
       python -m flake8 backend/
       cd backend/
       python manage.py test
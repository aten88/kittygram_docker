# .github/workflows/main.yml
name: Main Kittygram workflow

on:
  push:
    branches:
      - main

jobs:
  tests:
    # Разворачиваем окружение:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        # Указываем имя тестовой базы, имя и пароль пользователя в открытом виде,
        # ведь эта база будет работать только во время прогона тестов
        env:
          POSTGRES_USER: ${{secrets.POSTGRES_USER}}
          POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
          POSTGRES_DB: ${{secrets.POSTGRES_DB}}
        ports:
          - 5432:5432
        # Эта конструкция описывает проверку готовности сервиса postgres
        # Если её не будет, то тесты могут запуститься раньше, чем сервер PostgreSQL
        # В результате тесты опять решат, что базы нет, — и упадут
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    # Копируем код проекта
    - name: Check out code
      uses: actions/checkout@v3
    # Устанавливаем Python с помощью action
    - name: Set up Python
      uses: actions/setup-python@v4
    # В action setup-python@v4 передаём параметр — версию Python
      with:
        python-version: 3.9
    # Обновляем pip, устанавливаем flake8 и flake8-isort, 
    # Чтобы запустить тесты, нужно установить зависимости
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install flake8==6.0.0 flake8-isort==6.0.0
        pip install -r ./backend/requirements.txt
    # Запускаем flake8
    - name: Test with flake8 and django tests
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        ALLOWED_HOSTS: ${{secrets.ALLOWED_HOSTS}}
        POSTGRES_USER: ${{secrets.POSTGRES_USER}}
        POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
        POSTGRES_DB: ${{secrets.POSTGRES_DB}}
        DB_HOST: 127.0.0.1
        DB_PORT: 5432
      # Вызываем flake8 и указываем ему,
      # что нужно проверить файлы только в папке backend/
      # Команд стало больше одной; ставим символ | и пишем команды построчно
      run: |
       python -m flake8 backend/
       cd backend/
       python manage.py test
  # Собрать и отправить образ приложения на Docker Hub
  build_and_push_to_docker_hub:
    name: Push Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests # Не выполнять сразу, ждать, пока выполнится tests
    steps:
      - name: Check out the repo
        # Получение исходного кода из репозитория
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        # Установка сборщика контейнеров Docker
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        # Авторизация на Docker Hub
        uses: docker/login-action@v2
        # При помощи with передаём в action параметры username и password
        with:
          username: ${{ secrets.LOGIN_DOCHUB }}
          password: ${{ secrets.PASSWORD_DOCHUB }}
      - name: Push to DockerHub
        # Одновременный билд и пуш образа в Docker Hub
        uses: docker/build-push-action@v4
        with:
          # Параметр context: ./backend/ указывает, что нужный Dockerfile 
          # находится в ./backend/
          context: ./backend/
          # Параметр push: true указывает, что образ нужно не только собрать,
          # но и отправить на Docker Hub
          push: true
          # В параметре tags задаётся название и тег для образа.
          # Для каждого пересобранного образа 
          # устанавливаем тег latest, чтобы потом
          # на сервере и в docker-compose.yml не указывать версию
          tags: ${{ secrets.LOGIN_DOCHUB }}/kittygram_backend:latest

  frontend_tests:
    runs-on: ubuntu-latest
    steps:
     - uses: actions/checkout@v3
     - name: Set up nodeJS
       # Это готовый воркфлоу для установки Node.js на раннер
       uses: actions/setup-node@v3
       with:
       # Это параметр воркфлоу, указывающий нужную версию Node.js
         node-version: 18 
     - name: Install dependencies
       # Эта команда устанавливает зависимости для фронтенда
       run: |
         cd frontend/
         npm ci
     - name: Test frontend
       # Запускаем тесты
       run: |
         cd frontend/
         npm run test

  build_frontend_and_push_to_docker_hub:
    name: Push frontend Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: frontend_tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.LOGIN_DOCHUB }}
          password: ${{ secrets.PASSWORD_DOCHUB }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags:  ${{ secrets.LOGIN_DOCHUB }}/kittygram_frontend:latest

  build_gateway_and_push_to_docker_hub:
    name: Push gateway Docker image to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.LOGIN_DOCHUB }}
          password: ${{ secrets.PASSWORD_DOCHUB }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
           context: ./nginx/
           push: true
           tags: ${{ secrets.LOGIN_DOCHUB }}/kittygram_gateway:latest

  deploy:
    runs-on: ubuntu-latest
    needs: 
    # Дождёмся билда всех образов Taski
     - build_and_push_to_docker_hub
     - build_frontend_and_push_to_docker_hub
     - build_gateway_and_push_to_docker_hub
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        # Копируем docker-compose.production.yml на продакшен-сервер
      - name: Copy docker-compose.yml via ssh
        uses: appleboy/scp-action@master
        # Передаём параметры для action appleboy/scp-action:
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "docker-compose.production.yml"
          target: "kittygram"
      - name: Executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          # Параметр script передаёт в action appleboy/ssh-action команды,
          # которые нужно выполнить на сервере, 
          # с которым установлено соединение
          script: |
              cd kittygram
              # Выполняет pull образов с Docker Hub
              sudo docker compose -f docker-compose.production.yml pull
              # Перезапускает все контейнеры в Docker Compose
              sudo docker compose -f docker-compose.production.yml down
              sudo docker compose -f docker-compose.production.yml up -d
              # Выполняет миграции и сбор статики
              sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
              sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic
              sudo docker compose -f docker-compose.production.yml exec backend cp -r /app/collected_static/. /backend_static/static/

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: Деплой успешно выполнен!